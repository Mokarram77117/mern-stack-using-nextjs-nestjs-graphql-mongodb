/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
import { useMutation, useQuery } from "@apollo/client";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { Button, Table } from "react-bootstrap";
import styles from "../../styles/Home.module.css";
import client from "../../apolloconfig";
import Pagination from "../../components/Pagination";
import { POSTS_PER_PAGE } from "../../config/postperpage";
import { DELETE_USER_MUTATION } from "../../graphql/Mutations";
import { QUERY_ALL_USERS, QUERY_BY_USERNAME } from "../../graphql/Queries";
import Navibar from "../../components/Navibar";


export default function Home({ usersProp, numpages, currentpage }) {
  const [_id, set_id] = useState("");
  const[image,setImage]=useState();
  const [name, setName] = useState("");
  const [age, setAge] = useState("");
  const [title, setTitle] = useState("");
  const [deleteUser] = useMutation(DELETE_USER_MUTATION);
  const onDelete = (_id) => {
    deleteUser({ variables: { id: _id }, _id,image, name, age, title });
  };


  
  const [searchName, setSearchName] = useState(""); 
  const [searchedUser, setSearchedUser] = useState([]);
  const { data } = useQuery(QUERY_BY_USERNAME, {
    variables: { data: searchName },
  });
  
  const createSearch = (e) => {
  e.preventDefault();
  setSearchName(e.target.value);
      };
               
  useEffect(() => {
          if (data) {
            setSearchedUser(data.usersbyname);
          }
        }, [data]);
        console.log(data)

 
  

  return (
    <div className={styles.container}>
      <Head>
        <title>Next JS Crud Operation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navibar onChange={createSearch}/>

      {searchedUser.length !== 0 ?(<main className={styles.main}>
              <h1 className={styles.title}>Searched Users &rarr;</h1>
    
              <div>
                <Table striped bordered>
                  <thead>
                    <tr>
                      <th> ID</th>
                      <th>Image</th>
                      <th> Name</th>  
                      <th> Age</th>
                      <th> Title</th>  
                      <th>Action</th>
                    </tr>
                  </thead>
    
                  {searchedUser.map((user) => {
                    const { _id,image, name, age, title } = user;
                    return (
                      // eslint-disable-next-line react/jsx-key
    
                      <tbody key={_id}>
                        <tr>
                          <td> {_id}</td>
                          <td><img src={image} height={100} width={100}/></td>
                          <td> {name}</td>
                          <td> {age}</td>
                          <td> {title}</td>
                          <td>
                            <Link
                              href={{
                                pathname: "/read",
                                query: user, // the data
                              }}
                            >
                              <Button className="action__btn m-2" variant="success">
                                Read
                              </Button>
                            </Link>
    
                            <Link
                              href={{
                                pathname: "/update",
                                query: user, // the data
                              }}
                            >
                              <Button className="action__btn m-2" variant="info">
                                Edit
                              </Button>
                            </Link>
    
                            <Link
                              href={"/"}
                            >
                              <Button
                                className="action__btn m-2"
                                variant="danger"
                                onClick={(e) => { 
                                  e.preventDefault();
                                  onDelete(_id)
                                }}
                              >
                                Delete
                              </Button>
                            </Link>
                          </td>
                        </tr>
                      </tbody>
                    );
                  })}
                </Table>
              </div>
    
              
            </main>):(<main className={styles.main}>
              <h1 className={styles.title}>All the Users &rarr;</h1>
    
              <div>
                <Table striped bordered>
                  <thead> 
                    <tr>
                      <th> ID</th>
                      <th>Image</th>
                      <th> Name</th>
                      <th> Age</th>
                      <th> Title</th>
                      <th>Action</th>
                    </tr>
                  </thead>
    
                  {usersProp.map((user) => {
                    const { _id,image, name, age, title } = user;
                    return (
                      // eslint-disable-next-line react/jsx-key
    
                      <tbody key={_id}>
                        <tr>
                          <td> {_id}</td>
                          <td><img src={image} height={100} width={100}/></td>
                          <td> {name}</td>
                          <td> {age}</td>
                          <td> {title}</td>
                          <td>
                            <Link
                              href={{
                                pathname: "/read",
                                query: user, // the data
                              }}
                            >
                              <Button className="action__btn m-2" variant="success">
                                Read
                              </Button>
                            </Link>
    
                            <Link
                              href={{
                                pathname: "/update",
                                query: user, // the data
                              }}
                            >
                              <Button className="action__btn m-2" variant="info">
                                Edit
                              </Button>
                            </Link>
    
                            <Link
                               href={{
                                pathname: "/"}}
                            >
                              <Button  
                                className="action__btn m-2"
                                variant="danger"
                                onClick={(e) => {
                                  e.preventDefault();
                                     
                                  onDelete(_id)  
                                }}
                              >
                                Delete
                              </Button>
                            </Link>
                          </td>
                        </tr>
                      </tbody>
                    );
                  })}
                </Table>
              </div>
    
              <Pagination currentpage={currentpage} numpages={numpages} />
            </main>)


      }
      
      

      <footer className={styles.footer}>
        Made by {"  "}
        <code className={styles.code}>Md Mokarram Hossain</code>
      </footer>
    </div>
  );
}

export const getStaticPaths = async () => {
  const { data } = await client.query({ query: QUERY_ALL_USERS });
  const numpages = Math.ceil(data?.users.length / POSTS_PER_PAGE);

  let paths = []; 
  for (let i = 1; i <= numpages; i++) {
    paths.push({
      params: { page_index: i.toString() },
    });
  }
 
  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async ({ params }) => {
  const page = parseInt((params && params.page_index) || 1);
  const { data } = await client.query({ query: QUERY_ALL_USERS });
  const numpages = Math.ceil(data?.users.length / POSTS_PER_PAGE);
  const pageIndex = page - 1;
  const pagedUsers = data?.users.slice(
    pageIndex * POSTS_PER_PAGE,
    (pageIndex + 1) * POSTS_PER_PAGE
  );
  

  return {
    props: {
      usersProp: pagedUsers,
      numpages,
      currentpage: page,
    },
  };
};
